// <begaining>二叉树的序列化和反序列化
// 左书 page103
// 1.先序序列化、反序列化
// 2.层序序列化、反序列化

// 1.先序序列化、反序列化
// 1-1.二叉树的先序序列化
// 思路1：通过递归先序遍历，空节点用"#"代替，节点之间用"！"分隔
public static String serialByPre1(TreeNode head) {
    if(head == null)
        return "#!";
    String res = head.val + "!";
    res += serialByPre1(head.left);
    res += serialByPre1(head.right);
    return res;
}

// 思路2：通过非递先序遍历，空节点用"#"代替，节点之间用"！"分隔
public static String serialByPre2(TreeNode head) {
    if (head == null)
        return "#!";
    Stack<TreeNode> stack = new Stack<TreeNode>();
    stack.push(head);
    String res = "";
    while (!stack.isEmpty()) {
        TreeNode tmp = stack.pop();
        res += tmp.val + "!";
        if (tmp.left == null)
            res += "#!";
        if (tmp.right == null)
            res += "#!";
        if (tmp.right != null)
            stack.push(tmp.right);
        if (tmp.left != null)
            stack.push(tmp.left);
    }
    return res;
}

// 1-2.二叉树的先序反序列化，用先序序列化得到的preStr，反向生成一棵二叉树
// 思路：先split("!")，得到一个数组,转成队列，再递归建树
public static TreeNode reconByPreString(String preStr) {
    String[] strings = preStr.split("!");
    Queue<String> queue = new LinkedList<String >();
    for (int i=0; i != strings.length; i++) {
        queue.offer(strings[i]);
    }
    return reconPreOrder(queue);
}

// 用二叉树的先序遍历序列，递归建立二叉树
public static TreeNode reconPreOrder(Queue<String> queue){
    String string = queue.poll();
    if (string.equals("#"))
        return null;
    TreeNode head = new TreeNode(Integer.valueOf(string));
    //递归建树
    head.left = reconPreOrder(queue);
    head.right = reconPreOrder(queue);
    return head;
}

// 2.层序序列化、反序列化
// 2-1.层序序列化二叉树
// 思路：用队列，将非空节点依次入队列，在入队列之前先加入序列，如果为空，则序列中加入"#"，使用“！”分隔
public static String serialByLevel(TreeNode head) {
    //
    if (head == null)
        return "#!";
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    // 在入队列的同时，就加入到序列中去
    String string = head.val+"!";
    queue.offer(head);
    while (!queue.isEmpty()) {
        TreeNode treeNode = queue.poll();
        if (treeNode.left != null){
            string += treeNode.left.val + "!";
            queue.offer(treeNode.left);
        }
        else
            string += "#!";
        if (treeNode.right != null){
            string += treeNode.right.val + "!";
            queue.offer(treeNode.right);
        }else
            string += "#!";
    }
    return string;
}

// 2-2.用层序序列构造二叉树
// 思路：
public static TreeNode reconByLevelString(String levelStr) {
    String[] strings = levelStr.split("!");
    if (strings[0].equals("#"))
        return null;
    // 将构造的非空树节点，放入队列，
    int i = 0;
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    TreeNode head = new TreeNode(Integer.valueOf(strings[i++]));
    queue.offer(head);
    while (!queue.isEmpty()) {
        TreeNode tmp = queue.poll();
        if (!strings[i].equals("#")) {
            tmp.left = new TreeNode(Integer.valueOf(strings[i++])) ;
            queue.offer(tmp.left);
        }else
            tmp.left = null;
        if (!strings[i].equals("#")) {
            tmp.right = new TreeNode(Integer.valueOf(strings[i++]));
            queue.offer(tmp.right);
        }else
            tmp.right = null;
    }
    return head;
}
// <ending>二叉树的序列化和反序列化
