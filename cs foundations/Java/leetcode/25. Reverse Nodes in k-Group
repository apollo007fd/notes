the question is in this link:https://leetcode.com/problems/reverse-nodes-in-k-group/description/

[Question description]
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Solution:
[my first solution: use a stack to store every k nodes]
[my second solution: mark every k nodes as a group, then reverse every group seperately.]
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// 解法1： 使用栈辅助
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k<2)
            return head;
        Stack<ListNode> stack = new Stack<ListNode>();
        ListNode cur = head;
        ListNode newhead = null;
        int cnt = 0;
        
        while(cur != null){
            stack.push(cur);
            cnt = (cnt+1)%k;
            cur = cur.next;
        }
        
        while(cnt-- != 0){
            stack.peek().next = newhead;
            newhead = stack.pop();
        }
        
        while(!stack.isEmpty()){
            cur=stack.pop();
            ListNode curhead = cur;
            cnt = k-1;
            while(cnt != 0){
                cur.next = stack.pop();
                cur = cur.next;
                cnt --;
            }
            cur.next = newhead;
            newhead = curhead;
        }
        return newhead;
    }
}

// 解法2： 不使用辅助栈，在原栈上直接以K个分组，进行逆置
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k<2 || head==null)
            return head;
        
        ListNode curhead = head;
        ListNode cur = head;
        ListNode nexthead = null;
        ListNode lasttail = null;
        ListNode newhead = null;
        
        int cnt = 0;
        boolean fstgroup = true;
        while(curhead != null){
            // determining group head and tail
            cnt = 1;
            cur = curhead;
            while(cur!=null && cnt != k){
                cur = cur.next;
                cnt ++;
            }
            
            ListNode curtail = cur;
            nexthead = (cur!=null && cur.next!=null) ? cur.next : null;
            
            if( cur != null){
                if(fstgroup)
                    newhead = cur;
            }else{
                if(fstgroup)
                    return head;
                else{
                    lasttail.next = curhead;
                    return newhead;
                }
            }
            
            // reverse current group
            ListNode pre = null;
            ListNode next = null;
            cur = curhead;
            while(cur != nexthead){
                next = cur.next;
                cur.next = pre;
                pre = cur;
                cur = next;
            }
            
            if(fstgroup)
                lasttail = head;
            else{
                lasttail.next = curtail;
                lasttail = curhead;
            }
            
            curhead = nexthead;
            fstgroup = false;
            
        }
        
        return newhead;
    }
}
