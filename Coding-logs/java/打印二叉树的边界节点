【题目】
给定一颗二叉树的头结点head，如果按照如下两种标准分别实现二叉树边界节点的逆时针打印。
【标准一】
1、头结点为边界节点，
2、叶节点为边界节点，如果节点在其所在的层中是最左或最右层，那么该节点也是边界节点。
【标准二】
1.头节点为边界节点，
2、叶节点为边界节点，
3、树左边界延伸下去的路径为边界节点
4、树右边界延伸下去的路径为边界节点
【解答】
标准二的答案是比较显然的。
标准一的答案：
// 打印二叉树的边界节点（标准1）
// 逆时针打印二叉树：根、左边界、叶、右边界
// 左边界：如果节点在其所在的层中是最左或最右的，那么也是边界
// 时间复杂度为O(N),空间复杂度为O(h), h为树高
public static void printBTreeBoundary(TreeNode head){
    if (head == null) {
        return;
    }

    int height = getHeight(head, 0);  // 求树高
    TreeNode[][] edgeMap = new TreeNode[height][2];
    setEdgeMap(head, 0, edgeMap);     // 求树的左、右边界
    
    // 打印左边界
    for (int i = 0; i != edgeMap.length; i++) {
        System.out.printf("%4d", edgeMap[i][0].val);

    }

    // 打印既不是左边界，也不是右边界的叶子节点
    printLeafNotInMap(head, 0, edgeMap);
    
    // 打印右边界，但不是左边界的节点
    for (int i = edgeMap.length - 1; i != -1; i--) {
        if (edgeMap[i][0] != edgeMap[i][1]) {
            System.out.printf("%4d", edgeMap[i][1].val);
        }
    }
}

// 递归求树高
public static int getHeight(TreeNode head, int l){
    if (head == null)
        return l;
    // 返回左、右孩纸的最大树高
    /*int leftH = getHeight(head.left, l+1);
    int rightH = getHeight(head.right, l+1);
    return leftH > rightH ? leftH : rightH;*/
    return Math.max(getHeight(head.left, l+1), getHeight(head.right, l+1));
}

// 求左and右边界
public static void setEdgeMap(TreeNode h, int l, TreeNode[][] edgeMap) {
    if (h == null) {
        return;
    }
    edgeMap[l][0] = edgeMap[l][0] == null ? h : edgeMap[l][0];
    edgeMap[l][1] = h;
    setEdgeMap(h.left, l+1, edgeMap);
    setEdgeMap(h.right, l+1, edgeMap);
} // 该函数相当于先序遍历，第1个被遍历的第l层节点，为第l层的最左边界，最后一个遍历的第l层节点，为第l层的最右边界。

// 打印既不是左边界，也不是右边界的叶子节点
public static void printLeafNotInMap(TreeNode head, int l, TreeNode[][] m){
    if (head == null)
        return;
    if (head.left == null && head.right == null && head != m[l][0] && head != m[l][1]) {
        System.out.printf("%4d", head.val);
    }
    printLeafNotInMap(head.left, l+1, m);
    printLeafNotInMap(head.right, l+1, m);
}
