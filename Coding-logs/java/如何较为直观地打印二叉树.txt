// 如何较为直观地打印二叉树
// 左书第100页
public static void printTree(TreeNode head) {
    System.out.println("Binary Tree:");
    printInOrder(head, 0, "H", 17);
    System.out.println();
}

// 打印的树，是原来的树逆时针旋转90°的形状，每个节点用^\v表示父节点在左上、左下，每个树节点占一行
public static void printInOrder(TreeNode head, int height, String to, int len) {
    if (head == null)
        return;
    // 先递归打印右子树的节点
    printInOrder(head.right, height+1, "v", len);
    // 再打印当前节点
    String val = to + head.val + to;
    int lenM = val.length();
    int lenL = (len - lenM) / 2;
    int lenR = len - lenM - lenL;
    val = getSpace(lenL) + val + getSpace(lenR);
    System.out.println(getSpace(height * len) + val);
    // 最后递归打印左子树
    printInOrder(head.left, height+1, "^", len);
}

// 获取指定个数的空白空间
public static String getSpace(int l) {
    StringBuffer stringBuffer = new StringBuffer();
    for (int i=0; i<l; i++) {
        stringBuffer.append(" ");
    }
    return stringBuffer.toString();
}
