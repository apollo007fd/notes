    public class TreeNode {
        public int val;
        public TreeNode left = null;
        public TreeNode right = null;

        public TreeNode(int val) {
	    this.val = val;
        }
    }

    // 分别用递归和非递归方式实现二叉树先序、中序、后序遍历
    // 用递归方式实现二叉树先序、中序、后序遍历
    // 递归先序遍历(递归中序遍历、后序遍历类似)
    public static void preOrderRecur(TreeNode treeNode){
        if(treeNode == null)
            return ;
        System.out.printf("%4d", treeNode.val);
        preOrderRecur(treeNode.left);
        preOrderRecur(treeNode.right);
    }

    // 非递归方式实现二叉树的先序遍历
    // 能用递归的方法实现的，都能用非递归的方法实现；
    // 思路：将树根节点压入栈，当栈非空时，进行如下循环：
    //   取出并遍历栈顶节点，如果该节点右孩子非空，将其入栈；如果左孩子非空，也将其入栈；
    public static void preOrderRecur1(TreeNode treeNode){
        if(treeNode == null)
            return;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(treeNode);
        while (!stack.isEmpty()){
            TreeNode tmp = stack.pop();
            System.out.printf("%4d",tmp.val);
            if(tmp.right != null)
                stack.push(tmp.right);
            if(tmp.left != null)
                stack.push(tmp.left);
        }
        System.out.println();
    }
    
    // 非递归中序遍历二叉树
    // 使用1个辅助栈
    public static void inOrderRecur(TreeNode treeNode){
    	if (treeNode == null )
	    	return;
	// 定义辅助树节点指针
	TreeNode cur = treeNode;
	Stack<TreeNode> s = new Stack<TreeNode>();
	// 当辅助树节点指针不空，栈不空时，循环
	while ( cur!=null || !s.isEmpty() ){
		// 当指针不空时，将指向的节点入栈，指针往左走
		if ( cur != null){
			s.push(cur);
			cur = cur.left;
		}else{  
		// 当往左走到尽头时，出栈一个节点，遍历该节点，并从该节点往右走
			cur = s.pop();
			System.out.printf("%3d",cur.val);
			cur = cur.right;
		}
	}
	System.out.println();
    }
    
    // 非递归后序遍历二叉树-有2种方法
    // 方法1：使用2个辅助栈
    public static void postOrderRecur(TreeNode treeNode){
    	if (treeNode == null)
		return;
	Stack<TreeNode> s1 = new Stack<TreeNode>();
	Stack<TreeNode> s2 = new Stack<TreeNode>();
	s1.push(treeNode);
	// 栈s1不空时，取s1当前栈顶节点，并使该节点入栈s2，如果其左、右孩子不空，则依次入栈s1  （s2的入栈顺序是中，右，左）
	while(!s1.isEmpty()){
		TreeNode tmp = s1.pop();
		s2.push(tmp);
		if ( tmp.left != null )
			s1.push(tmp.left);
		if ( tmp.right != null )
			s1.push(tmp.right);
	}
	// 依次从s2中出栈，出栈顺序就是后序遍历的次序，(s2的出栈顺序是左，右，中)
	while( !s2.isEmpty() ){
		System.out.printf("%3d",s2.pop().val);
	}
	System.out.println();
    }
