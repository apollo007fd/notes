【题目】
    给定一个单链表的头部节点head，链表的长度为N，如果N为偶数，那么前N/2个节点算作左半区，后N/2个节点算作右半区；如果N为奇数，那么前N/2个节点算作左半区，
 后N/2+1个节点算作右半区。左半区从左到右依次记为L1->L2->... ， 右半区从左到右依次记为R1 -> R2 -> ... , 请将单链表调整成L1 -> R1 -> L2 -> R2 ...
 的形式。
 
 【思路】
 如果链表长度小于等于2，则无须调整，直接返回头结点即可；
 如果链表长度大于2，则需要先找到左半区的最后一个节点，遍历整个链表，当前节点每右移两个节点，左半区的最后一个节点右移一个节点....
 找到左半区的最后一个节点，再将左右半区链接起来。
 
 public class Node {
    //左书第二章，单链表结点的定义
    public int val;
    public Node next;

    public Node(int data){
        this.val = data;
    }
 }

 
 //按照左右半区的方式重新组合单链表
    public static Node merge2(Node head){
        // 寻找左半区的最后一个
        if(head==null || head.next == null || head.next.next == null)
            return head;
        Node leftlast = head;
        Node curlast = head.next;
        Node rightcur = null;
        Node leftcur = head;
        Node temp = null;
        while(curlast.next != null && curlast.next.next != null){
            leftlast = leftlast.next;
            curlast = curlast.next.next;
        }
        rightcur = leftlast.next;
        curlast = null; // 当做temp使用
        while (leftcur != leftlast){
            temp = leftcur.next;    // 暂存左半区的第二个
            curlast = rightcur.next;  // 暂存右半区的第二个
            leftcur.next = rightcur;    //
            rightcur.next = temp;
            rightcur = curlast;
            leftcur = temp;
        }
        leftcur.next = rightcur;
        return  head;
    }
