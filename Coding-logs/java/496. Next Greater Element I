You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
Note:
All elements in nums1 and nums2 are unique.
The length of both nums1 and nums2 would not exceed 1000.


解法1：暴力解法
先在nums数组中找到每个findNums数组的元素，在向后搜索比该元素大的元素。代码如下：
public int[] nextGreaterElement(int[] findNums, int[] nums) {
	int result[] = new int[findNums.length];
	for(int i=0; i<findNums.length; i++) {
		int obj = findNums[i];
		int j = 0;
		while(j < nums.length && obj!=nums[j++]);	//找findNums[i]在nums中的下标
		while(j < nums.length && obj >= nums[j]) j++;	//继续搜索nums数组中大于findNums[i]的数
		if(j < nums.length)
			result[i] = nums[j];
		else
			result[i] = -1;
	}
	return result;
}
时间分布：15%



解法2：使用ArrayList.indexOf()搜索下标;
public static int[] nextGreaterElement(int[] findNums, int[] nums) {
	int result[] = new int[findNums.length];
	ArrayList<Integer> list = new ArrayList<Integer>();
	
	for(int t:nums)
		list.add(t);
	
	for(int i=0; i<findNums.length; i++) {
		int index = list.indexOf(findNums[i]) + 1;
		while(index < nums.length)
			if(nums[index] > findNums[i]) {
				result[i] = nums[index];
				break;
			}
			else
				index++;
		if(index == nums.length)
			result[i] = -1;
	}

	return result;
}
效果还是不太好...


解法3：使用HashMap将nums数组中的值与对应的下标映射，节省在nums中搜索findNums数组元素的时间；
public int[] nextGreaterElement(int[] findNums, int[] nums) {
	int result[] = new int[findNums.length];
	
	HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();	//error: HashMap<int, int>
	
	for(int i=0; i<nums.length; i++) {
		map.put(nums[i], i);
	}
	
	for(int j = 0; j<findNums.length; j++) {
		int index = map.get(findNums[j]);
		while(index < nums.length) {
			if(nums[index] > findNums[j]){
				result[j] = nums[index];
				break;
			}
			else
				index++;
		}
		if(index == nums.length)
			result[j] = -1;
	}

	return result;
}
时间分布：72.99%

