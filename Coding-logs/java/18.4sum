class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        
        if (nums==null || nums.length==0)
            return res;
        int length = nums.length;
        
        Arrays.sort(nums);
        
        int max = nums[length-1];
        if (4 * nums[0] > target || 4 * max < target)
            return res;
        
        int i, z;
        for (i = 0; i < length; i++) {
            z = nums[i];
            if (i > 0 && z == nums[i-1])
                continue;
            if (z + 3 * max < target)
                continue;
            if (4 * z > target)
                break;
            if (4 * z == target) {
                if (i + 3 < length && nums[i+3]==z)
                    res.add(Arrays.asList(z,z,z,z));
                break;
            }
            threeSumForFour(nums, target-z, i+1, length-1, res, z);
        }
        
        return res;
    }
    
    public void threeSumForFour(int[] nums, int target, int low, int high, List<List<Integer>> res, int z1) {
        if (3 * nums[low] > target || 3 * nums[high] < target)
            return;
        int i, z, max;
        max = nums[high];
        for (i=low; i+1<high; i++) {
            z = nums[i];
            if ( i > low  && z == nums[i-1])
                continue;
            if (z + 2 * max < target)
                continue;
            
            if (3 * z > target)
                break;
            
            twoSumForFour(nums, target-nums[i], i+1, high, res, nums[i], z1);
        }
    }
    
    public void twoSumForFour(int[] nums, int target, int low, int high, List<List<Integer>> res, int z1, int z2) {
        if (nums[low] * 2 > target || nums[high] * 2 < target)
            return;
        while (low < high) {
            int sum = nums[low] + nums[high];
            if (sum == target) {
                res.add(Arrays.asList(z1, z2, nums[low], nums[high]));
                int x = nums[low];
                while (++low < high && nums[low] == x);
                x = nums[high];
                while (--high > low && nums[high] == x);
            } else if (sum > target)
                high--;
            else
                low++;
        }
        return;    
    }
    
}
